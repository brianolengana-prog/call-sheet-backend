// Prisma schema for Call Sheet Management System Backend
// Connected to Supabase PostgreSQL database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")      // Pooled connection for queries
  directUrl = env("DIRECT_URL")        // Direct connection for migrations
}

// ========================================
// AUTHENTICATION & USER MANAGEMENT
// ========================================

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  name              String
  passwordHash      String?   @map("password_hash")
  provider          String    @default("email")
  providerId        String?   @map("provider_id")
  emailVerified     Boolean   @default(false) @map("email_verified")
  twoFactorEnabled  Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret   String?   @map("two_factor_secret")
  loginAttempts     Int       @default(0) @map("login_attempts")
  lockedUntil       DateTime? @map("locked_until")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  twoFactorCodes    TwoFactorCode[]
  securityAuditLogs SecurityAuditLog[]
  sessions          Session[]
  usage             Usage[]
  subscriptions     Subscription[]
  payments          Payment[]

  @@map("users")
}

// ========================================
// EXISTING CORE TABLES (from your schema)
// ========================================

model Profile {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique @map("user_id") @db.Uuid
  displayName String?  @map("display_name")
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations to existing tables
  callSheets  CallSheet[]
  jobs        Job[]
  productions Production[]
  contacts    Contact[]

  @@map("profiles")
}

model Production {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  name        String
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  profile     Profile     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  callSheets  CallSheet[]
  jobs        Job[]

  @@map("productions")
}

model CallSheet {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  productionId String   @map("production_id") @db.Uuid
  title        String
  shootDate    String   @map("shoot_date")
  location     String?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  profile    Profile    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  production Production @relation(fields: [productionId], references: [id], onDelete: Cascade)

  @@map("call_sheets")
}

model Job {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  title            String
  fileName         String?  @map("file_name")
  fileUrl          String?  @map("file_url")
  status           JobStatus @default(PROCESSING)
  processedContacts Json?   @map("processed_contacts") @db.JsonB
  productionId     String?  @map("production_id") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  profile    Profile     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  production Production? @relation(fields: [productionId], references: [id], onDelete: SetNull)
  contacts   Contact[]

  @@map("jobs")
}

model Contact {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jobId     String   @map("job_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  name      String
  email     String?
  phone     String?
  role      String?
  company   String?
  isSelected Boolean @default(true) @map("is_selected")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  job     Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("contacts")
}

// ========================================
// EXISTING BILLING TABLES
// ========================================

model Subscription {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String            @map("user_id") @db.Uuid
  stripeCustomerId  String            @map("stripe_customer_id")
  stripeSubscriptionId String?        @unique @map("stripe_subscription_id")
  status            String
  priceId           String            @map("price_id")
  currentPeriodStart DateTime         @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd   DateTime         @map("current_period_end") @db.Timestamptz(6)
  cancelAtPeriodEnd  Boolean          @default(false) @map("cancel_at_period_end")
  trialStart        DateTime?         @map("trial_start") @db.Timestamptz(6)
  trialEnd          DateTime?         @map("trial_end") @db.Timestamptz(6)
  canceledAt        DateTime?         @map("canceled_at") @db.Timestamptz(6)
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage Usage[]
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String   @map("user_id") @db.Uuid
  subscriptionId        String?  @map("subscription_id") @db.Uuid
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  stripeInvoiceId       String?  @map("stripe_invoice_id")
  amount                Int
  currency              String   @default("usd")
  status                String
  paidAt                DateTime? @map("paid_at") @db.Timestamptz(6)
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Plan {
  id                String   @id @default(cuid())
  name              String
  type              String   // free, starter, professional, enterprise
  description       String?
  price             Int      // in cents
  interval          String   // month, year
  stripePriceId     String?  @unique @map("stripe_price_id")
  isActive          Boolean  @default(true) @map("is_active")
  isPopular         Boolean  @default(false) @map("is_popular")
  isEnterprise      Boolean  @default(false) @map("is_enterprise")
  
  // Limits
  uploadsPerMonth   Int      @default(1) @map("uploads_per_month")
  maxFileSize       Int      @default(10) @map("max_file_size") // in MB
  maxFilesPerUpload Int      @default(5) @map("max_files_per_upload")
  aiProcessingMinutes Int    @default(60) @map("ai_processing_minutes")
  storageGB         Float    @default(1) @map("storage_gb")
  apiCallsPerMonth  Int      @default(100) @map("api_calls_per_month")
  supportLevel      String   @default("community") @map("support_level")
  customBranding    Boolean  @default(false) @map("custom_branding")
  advancedAnalytics Boolean @default(false) @map("advanced_analytics")
  webhookSupport    Boolean  @default(false) @map("webhook_support")
  ssoSupport        Boolean  @default(false) @map("sso_support")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("plans")
}

// ========================================
// AUTHENTICATION TOKENS
// ========================================

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model TwoFactorCode {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") @db.Uuid
  code      String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_codes")
}

model SecurityAuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id") @db.Uuid
  action    String
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  success   Boolean
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_audit_log")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id") @db.Uuid
  accessToken  String   @unique @map("access_token")
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  isActive     Boolean  @default(true) @map("is_active")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Usage {
  id            String   @id @default(cuid())
  userId        String   @map("user_id") @db.Uuid
  subscriptionId String? @map("subscription_id") @db.Uuid
  month         String   // YYYY-MM format
  jobsProcessed Int      @default(0) @map("jobs_processed")
  contactsExtracted Int  @default(0) @map("contacts_extracted")
  apiCalls      Int      @default(0) @map("api_calls")
  uploadsUsed   Int      @default(0) @map("uploads_used")
  uploadsLimit  Int      @default(1) @map("uploads_limit")
  storageUsedGB Float    @default(0) @map("storage_used_gb")
  storageLimitGB Float   @default(1) @map("storage_limit_gb")
  aiMinutesUsed Int      @default(0) @map("ai_minutes_used")
  aiMinutesLimit Int     @default(60) @map("ai_minutes_limit")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@unique([userId, month])
  @@map("usage")
}

// ========================================
// ENUMS
// ========================================

enum JobStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED

  @@map("job_status")
}
